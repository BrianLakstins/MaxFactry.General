@model System.Object
@{
    /*
        additionalViewData definitions
            Help - Help text that displays as a tool tip
            Icon - Name of glyph from http://getbootstrap.com/components/#glyphicons to show at end of text edit field
            LabelColumnWidth - Integer width of label column
            InputControl - string for input control
     */

    string lsValue = string.Empty;
    if (null != ViewData["Value"])
    {
        if (ViewData["Value"] is IHtmlString)
        {
            lsValue = ((IHtmlString)ViewData["Value"]).ToHtmlString();
        }
        else
        { 
            lsValue = ViewData["Value"].ToString();
        }
    }
    else if (null != Model)
    {
        lsValue = Model.ToString();
    }

    string lsInputClass = string.Empty;
    if (!ViewData.ModelState.IsValidField(ViewData.TemplateInfo.HtmlFieldPrefix))
    {
        lsInputClass = "has-error";
    }

    string lsHelp = string.Empty;
    string lsIcon = "question-sign";
    if (ViewData.ModelMetadata.IsRequired)
    {
        lsIcon = "asterisk";
        lsHelp = "Required";
    }

    if (null != ViewData["Help"] && ViewData["Help"] is string)
    {
        lsHelp = (string)ViewData["Help"];
    }

    if (null != ViewData["Icon"] && ViewData["Icon"] is string)
    {
        lsIcon = (string)ViewData["Icon"];
    }

    IHtmlString lsInputControl = null;
    if (null != ViewData["InputControl"] && ViewData["InputControl"] is IHtmlString)
    {
        lsInputControl = (IHtmlString)ViewData["InputControl"];
    }

    IHtmlString lsAddOnStartControl = null;
    if (null != ViewData["OverrideControl"] && ViewData["OverrideControl"] is IHtmlString)
    {
        lsAddOnStartControl = (IHtmlString)ViewData["OverrideControl"];
    }

    if (null != ViewData["AddOnStartControl"] && ViewData["AddOnStartControl"] is IHtmlString)
    {
        lsAddOnStartControl = (IHtmlString)ViewData["AddOnStartControl"];
    }

    IHtmlString lsAddOnEndControl = null;
    if (null != ViewData["AddOnEndControl"] && ViewData["AddOnEndControl"] is IHtmlString)
    {
        lsAddOnEndControl = (IHtmlString)ViewData["AddOnEndControl"];
    }

    if (!string.IsNullOrEmpty(lsHelp) || null != lsAddOnStartControl || null != lsAddOnEndControl)
    {
        lsInputClass += " input-group";
    }    

    int lnLabelColumnWidth = 1;
    if (null != ViewData["LabelColumnWidth"])
    {
        lnLabelColumnWidth = MaxFactry.Core.MaxConvertLibrary.ConvertToInt(typeof(object), ViewData["LabelColumnWidth"]);
    }

    int lnInputColumnWidth = 12 - lnLabelColumnWidth;
    string lsInputType = "text";
    string lsStep = string.Empty;
    if (Model is double || Model is int || Model is long)
    {
        lsInputType = "number";
        if (Model is double)
        {
            lsStep = " step=\"any\"";
        }
    }

    if (null != ViewData["InputType"])
    {
        lsInputType = MaxFactry.Core.MaxConvertLibrary.ConvertToString(typeof(object), ViewData["InputType"]);
    }

    string lsLabelText = ViewData.ModelMetadata.DisplayName;
    if (null != ViewData["LabelText"])
    {
        lsLabelText = MaxFactry.Core.MaxConvertLibrary.ConvertToString(typeof(object), ViewData["LabelText"]);
    }

    if (string.IsNullOrEmpty(lsLabelText))
    {
        lsLabelText = ViewData.ModelMetadata.PropertyName;
    }

    string lsPlaceholder = string.Empty;
    if (null != ViewData["Placeholder"])
    {
        lsPlaceholder = MaxFactry.Core.MaxConvertLibrary.ConvertToString(typeof(object), ViewData["Placeholder"]);
    }

    bool lbIsReadOnly = false;
    if (null != ViewData["IsReadOnly"])
    {
        lbIsReadOnly = MaxFactry.Core.MaxConvertLibrary.ConvertToBoolean(typeof(object), ViewData["IsReadOnly"]);
    }

    if (ViewData.ModelMetadata.IsReadOnly)
    {
        lbIsReadOnly = true;
    }

    bool lbIsCheckBox = false;
    if (null != ViewData["IsCheckBox"])
    {
        lbIsCheckBox = MaxFactry.Core.MaxConvertLibrary.ConvertToBoolean(typeof(object), ViewData["IsCheckBox"]);
    }

    string lsChecked = string.Empty;
    if (lbIsCheckBox)
    {
        lnInputColumnWidth = 1;
        lsInputType = "checkbox";
        if (null != Model && MaxFactry.Core.MaxConvertLibrary.ConvertToBoolean(typeof(Object), Model))
        {
            lsChecked = "checked='checked'";
        }
    }
}
<div class="row">
    <div class="form-group">
        <label class="control-label col-sm-@lnLabelColumnWidth" for="@ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty)">@lsLabelText</label>


        <div class="col-sm-@lnInputColumnWidth">
            <div class="@lsInputClass">
                @if (null != lsInputControl)
                {
                    if (null != lsAddOnStartControl)
                    {
                        <span class="tooltipactive input-group-addon" data-placement="right" data-toggle="tooltip" title="Override">
                            @lsAddOnStartControl
                        </span>
                    }
                    
                    @lsInputControl

                    if (null != lsAddOnEndControl)
                    {
                        <span class="input-group-addon">
                            @lsAddOnEndControl
                        </span>
                    }
                }
                else if (lbIsReadOnly)
                {
                    if (null != lsAddOnStartControl)
                    {
                        <span class="tooltipactive input-group-addon" data-placement="right" data-toggle="tooltip" title="Override" style="background-color:transparent;border-width:0px;">
                            @lsAddOnStartControl
                        </span>
                    }
                    <p class="form-control-static" id="@ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty)">@Html.Raw(lsValue)</p>

                    if (null != lsAddOnEndControl)
                    {
                        <span class="input-group-addon">
                            @lsAddOnEndControl
                        </span>
                    }
                }
                else if (lbIsCheckBox)
                {
                    <input class="form-control" id="@ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty)" name="@ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty)" type="@lsInputType" value="true" @Html.Raw(lsChecked) />
                    <input type="hidden" value="false" name="@ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty)" />
                }
                else
                {
                    if (null != lsAddOnStartControl)
                    {
                        <span class="tooltipactive input-group-addon" data-placement="right" data-toggle="tooltip" title="Override">
                            @lsAddOnStartControl
                        </span>
                    }
                    <input class="form-control" id="@ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty)" name="@ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty)" type="@lsInputType" value="@lsValue" placeholder="@lsPlaceholder" @Html.Raw(lsStep) />

                    if (null != lsAddOnEndControl)
                    {
                        <span class="input-group-addon">
                            @lsAddOnEndControl
                        </span>
                    }
                }

                @if (!string.IsNullOrEmpty(lsHelp))
                {
                    <span class="tooltipactive btn input-group-addon" data-placement="left" data-toggle="tooltip" title="@lsHelp">
                        <span class="glyphicon glyphicon-@lsIcon"></span>
                    </span>
                }

            </div>
            @if (null != ViewData.ModelState[ViewData.TemplateInfo.HtmlFieldPrefix])
            {
                foreach (var loError in ViewData.ModelState[ViewData.TemplateInfo.HtmlFieldPrefix].Errors)
                {
                    <span class="help-block">@loError.ErrorMessage</span>
                }
            }
        </div>
    </div>
</div>